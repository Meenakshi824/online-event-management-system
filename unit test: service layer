package com.eventmanagement.service;

import com.eventmanagement.dao.EventDAO;
import com.eventmanagement.model.Event;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class EventServiceTest {

    @Mock
    private EventDAO eventDAO;

    @InjectMocks
    private EventService eventService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetAllEvents() {
        List<Event> events = Arrays.asList(
                new Event(1L, "Tech Conference", "An annual tech conference.", "2025-01-10"),
                new Event(2L, "Music Festival", "A grand music festival.", "2025-03-15")
        );

        when(eventDAO.findAll()).thenReturn(events);

        List<Event> result = eventService.getAllEvents();

        assertEquals(2, result.size());
        verify(eventDAO, times(1)).findAll();
    }

    @Test
    public void testGetEventById() {
        Event event = new Event(1L, "Tech Conference", "An annual tech conference.", "2025-01-10");

        when(eventDAO.findById(1L)).thenReturn(Optional.of(event));

        Optional<Event> result = eventService.getEventById(1L);

        assertTrue(result.isPresent());
        assertEquals(event.getTitle(), result.get().getTitle());
        verify(eventDAO, times(1)).findById(1L);
    }

    @Test
    public void testCreateEvent() {
        Event event = new Event(1L, "Tech Conference", "An annual tech conference.", "2025-01-10");

        when(eventDAO.save(event)).thenReturn(event);

        Event result = eventService.createEvent(event);

        assertEquals(event.getId(), result.getId());
        verify(eventDAO, times(1)).save(event);
    }
}
